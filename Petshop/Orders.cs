//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Petshop
{
    using System;
    using System.Collections.Generic;
    using DocumentFormat.OpenXml.Packaging;
    using System.Reflection;
    using DocumentFormat.OpenXml.Wordprocessing;
    using System.IO;
    using Microsoft.Win32;
    using System.Linq;

    public partial class Orders
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Orders()
        {
            this.Products_in_order = new HashSet<Products_in_order>();
        }

        public int id_order { get; set; }
        public Nullable<System.DateTime> date_of_order { get; set; }
        public Nullable<System.DateTime> date_of_issue { get; set; }
        public string delivery_address { get; set; }
        public int id_client { get; set; }

        public string OrderDateString 
        {
            get
            {
                return date_of_order.Value.ToShortDateString() + " " + date_of_order.Value.ToShortTimeString();
            }
        }

        public virtual Clients Clients { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Products_in_order> Products_in_order { get; set; }

        public void GenerateCheck()
        {
            string templatePath = @"C:\Users\Тимофей\Desktop\Курсовая\CheckTemplate.docx";
            string resultPath = @"C:\Users\Тимофей\Desktop\Курсовая\source\checks\Order" + id_order.ToString() + ".docx";
            File.Copy(templatePath, resultPath);
            using (WordprocessingDocument wordProcessingDocument = WordprocessingDocument.Open(resultPath, true))
            {
                if (wordProcessingDocument != null)
                {
                    var texts = wordProcessingDocument.MainDocumentPart.Document.Body.Descendants<Text>();

                    Type type = typeof(Orders);

                    var props = type.GetProperties();


                    var OrderProducts = PetshopEntities.GetContext().Products_in_order.Where(o => o.id_order == this.id_order);
                    decimal total = 0;
                    foreach (var p in OrderProducts)
                    {
                        total += (decimal)(p.Products.price * p.count_of_products);
                    }

                    foreach (Text text in texts)
                    {
                        foreach (var p in props)
                        {
                            if (p.Name.Contains(text.Text))
                            {
                                text.Text = p.GetValue(this).ToString();
                            }
                        }

                        if (text.Text.Contains("TotalPrice"))
                        {
                            text.Text = "Итого " + total.ToString() + " руб.";
                        }
                    }

                    foreach (var pio in Products_in_order)
                    {
                        wordProcessingDocument.MainDocumentPart.Document.Body.AppendChild(new Paragraph()).AppendChild(new Run()).AppendChild(new Text(pio.Products.product + " " + pio.count_of_products + " шт.  " + pio.TotalPrice.ToString() + " руб."));
                    }
                }
            }
        }
    }
}
