//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Petshop
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PetshopEntities : DbContext
    {
        private PetshopEntities()
            : base("name=PetshopEntities")
        {
        }

        private static PetshopEntities _context;

        public static PetshopEntities GetContext()
        {
            if (_context == null)
                _context = new PetshopEntities();
            return _context;
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admins> Admins { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<Characteristics> Characteristics { get; set; }
        public virtual DbSet<Clients> Clients { get; set; }
        public virtual DbSet<Firms> Firms { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<ProductCharacteristics> ProductCharacteristics { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<Products_in_order> Products_in_order { get; set; }
        public virtual DbSet<ProductsCharacteristicView> ProductsCharacteristicView { get; set; }
    
        public virtual int ChangeCharacteristicByName(string name, Nullable<int> id_product, Nullable<int> prev_id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var id_productParameter = id_product.HasValue ?
                new ObjectParameter("id_product", id_product) :
                new ObjectParameter("id_product", typeof(int));
    
            var prev_idParameter = prev_id.HasValue ?
                new ObjectParameter("prev_id", prev_id) :
                new ObjectParameter("prev_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeCharacteristicByName", nameParameter, id_productParameter, prev_idParameter);
        }
    }
}
